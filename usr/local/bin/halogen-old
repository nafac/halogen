source /etc/halogen.conf

## References; semi-documented and tested
#commit=`sqlite3 $lib_path/remote.db "SELECT * FROM base_packages WHERE 1"`;
#pkgname="$(echo ${pkg_file[$i]} | sed 's/\.[^.]*$//')"
#echo $Id / $Furl / $Conf
#Furl=`echo $row | awk '{split($0,a,"|"); print a[2]}' # split
#row=$(echo "${row}"|tr '\n' ' ') # renove newlines.
#query="SELECT conf FROM base_packages WHERE id=$Id" # SQL..
#Conf=`sqlite3 $lib_path/remote.db "$query"` # Click, click, yum, yum.
## References; undocumented
      #tr '\n' ' ' < ${$row}
      #data="$(echo ${row} | sed ':a;N;$!ba;s/\n/ /g')"
      #echo sed ':a;N;$!ba;s/\n/ /g'
      #data=$(echo $row | tr "|" " ")
      #IFS='|' read -a data <<< "$row"
      #echo ${data[0]}
      #echo ${data[1]}
      #echo ${data[2]}
      #Id=`echo $row | awk '{split($0,a,"|"); print a[1]}'`
      #query="SELECT status FROM base_packages WHERE id=$Id" # SQL..
      #Status=`sqlite3 $lib_path/remote.db "$query"` # Click, click, yum, yum.

# list of stages and packages
# bootstrap
PKGLIST_0="
gmp-5.1.3
mpfr-3.1.2
mpc-1.0.2
isl-0.12.2
gcc-4.9.2
bsd-init-todo
bash-todo
"
# pass one
PKGLIST_1="
"
# live dvd
PKGLIST_2="
"
# package manager
PKGLIST_3="
"

## Build a temporary system.
pkg_pre binutils-2.25
../binutils-2.25/configure    \
    --with-sysroot=/          \
    --with-lib-path=/lib      \
    --target=x86_64-linux-gnu \
    --disable-nls             \
    --disable-werror          \
    CFLAGS="$OPTIMIZE_1"      \
    CXXFLAGS="$OPTIMIZE_1"
make CFLAGS="$OPTIMIZE_1" CXXFLAGS="$OPTIMIZE_1"
pkg_post binutils-2.25

cd gmp-5.1.3 && \
make clean && \ # TODO conditional
make distclean && \
./configure --prefix=/usr \
            --enable-cxx  \
            CFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" CXXFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" && \
make CFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" CXXFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" && \
make check && \
sudo make install && \
cd .. && \

cd mpfr-3.1.2 && \
make clean && \
make distclean && \
./configure --prefix=/usr        \
  --enable-thread-safe \
  CFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" CXXFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" && \
make CFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" CXXFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" && \
make check && \
sudo make install && \
cd .. && \

cd mpc-1.0.2 && \
make clean && \
make distclean && \
./configure --prefix=/usr \
  CFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" CXXFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" && \
make CFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" CXXFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" && \
make check && \
sudo make install && \
cd .. && \

cd isl-0.12.2 && \
make clean && \
make distclean && \
./configure --prefix=/usr \
  CFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" CXXFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" && \
make CFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" CXXFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" && \
make check && \
sudo make install && \
cd .. && \

rm -Rf gcc-build && mkdir gcc-build && cd gcc-build && \
../gcc-4.9.2/configure           \
  --prefix=/usr                  \
  --with-sysroot=/               \
  --target=x86_64-linux-gnu      \
  --disable-multilib             && \
make CFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" CXXFLAGS="-O -march=amdfam10 -mcx16 -mpopcnt -pipe" && \
make check && \
sudo make install && \
cd .. && \

wget http://www.nic.funet.fi/pub/gnu/ftp.gnu.org/pub/gnu/gcc/gcc-4.9.2/gcc-4.9.2.tar.gz
pkg_pre gcc-4.9.2
../gcc-4.9.2/configure         \
  --prefix=/usr                \
  --with-sysroot=/             \
  --target=x86_64-linux-gnu    \
  --disable-multilib           \
  CFLAGS="$OPTIMIZE_1"         \
  CXXFLAGS="$OPTIMIZE_1"
make CFLAGS="$OPTIMIZE_1" CXXFLAGS="$OPTIMIZE_1"
echo "Special treat for GCC as the test routine requires too many dependancies."
sudo make install
#sudo rm /usr/bin/gcc
#sudo rm /usr/bin/g++
#sudo ln -s /usr/local/bin/x86_64-linux-gnu-gcc /usr/bin/gcc
#sudo ln -s /usr/local/bin/x86_64-linux-gnu-gcc /usr/bin/g++
cd ..

wget http://www.nic.funet.fi/pub/gnu/ftp.gnu.org/pub/gnu/glibc/glibc-2.20.tar.gz
pkg_pre glibc-2.20
../glibc-2.20/configure       \
    --with-sysroot=/          \ # Todo, conf!
    --with-lib-path=/lib      \
    --target=x86_64-linux-gnu \
    --disable-nls             \
    --disable-werror          \
    CFLAGS="$OPTIMIZE_1"      \
    CXXFLAGS="$OPTIMIZE_1"
make CFLAGS="$OPTIMIZE_1" CXXFLAGS="$OPTIMIZE_1"
pkg_post glibc-2.20

## optional packages
wget http://www.nic.funet.fi/pub/gnu/ftp.gnu.org/pub/gnu/autoconf/autoconf-2.68.tar.gz
pkg_pre autoconf-2.68
../autoconf-2.68/configure    \
    CFLAGS="$OPTIMIZE_1"      \
    CXXFLAGS="$OPTIMIZE_1"
make CFLAGS="$OPTIMIZE_1" CXXFLAGS="$OPTIMIZE_1"
pkg_post autoconf-2.68

wget http://www.nic.funet.fi/pub/gnu/ftp.gnu.org/pub/gnu/automake/automake-1.15.tar.gz
pkg_pre automake-1.15
../automake-1.15/configure    \
    CFLAGS="$OPTIMIZE_1"      \
    CXXFLAGS="$OPTIMIZE_1"
make CFLAGS="$OPTIMIZE_1" CXXFLAGS="$OPTIMIZE_1"
pkg_post automake-1.15

wget http://www.nic.funet.fi/pub/gnu/ftp.gnu.org/pub/gnu/libtool/libtool-2.4.4.tar.gz
pkg_pre libtool-2.4.4
../libtool-2.4.4/configure    \
    CFLAGS="$OPTIMIZE_1"      \
    CXXFLAGS="$OPTIMIZE_1"
make CFLAGS="$OPTIMIZE_1" CXXFLAGS="$OPTIMIZE_1"
pkg_post libtool-2.4.4

wget http://www.nic.funet.fi/pub/gnu/ftp.gnu.org/pub/gnu/guile/guile-2.0.11.tar.gz
pkg_pre guile-2.0.11
../guile-2.0.11/configure   \
    CFLAGS="$OPTIMIZE_1"      \
    CXXFLAGS="$OPTIMIZE_1"
make CFLAGS="$OPTIMIZE_1" CXXFLAGS="$OPTIMIZE_1"
pkg_post guile-2.0.11

wget http://www.nic.funet.fi/pub/gnu/ftp.gnu.org/pub/gnu/autogen/rel5.18.4/autogen-5.18.4.tar.gz
pkg_pre autogen-5.18.4
../autogen-5.18.4/configure   \
    CFLAGS="$OPTIMIZE_1"      \
    CXXFLAGS="$OPTIMIZE_1"
make CFLAGS="$OPTIMIZE_1" CXXFLAGS="$OPTIMIZE_1"
pkg_post autogen-5.18.4

# halogen alpha2
#  bootstrap-update-host-toolchain)
#	_aux_root_check ${1}
#	echo "downloading binutils and dependancies.."
#	cd /tmp/halogen
#	wget -q -N https://ftp.gnu.org/gnu/binutils/binutils-2.26.1.tar.gz
#	rm -Rf binutils-2.26.1
#	tar -xf binutils-2.26.1.tar.gz
#	mkdir binutils-2.26.1/build
#	cd binutils-2.26.1/build
#	echo "configuring binutils.."
#	../configure --prefix=/usr --enable-shared --disable-werror
#	if [ $? -eq 0 ]; then
#		__build_package_simple
#	else
#		echo "Failed to configure!"
#		exit 1
#	fi
#	echo "downloading glibc and dependancies.."
#	cd /tmp/halogen
#	wget -q -N https://ftp.gnu.org/gnu/glibc/glibc-2.24.tar.gz
#	rm -Rf glibc-2.24
#	tar -xf glibc-2.24.tar.gz
#	mkdir glibc-2.24/build
#	cd glibc-2.24/build
#	echo "configuring glibc.."
#	../configure --prefix=/usr --enable-kernel=4.4.25 --enable-obsolete-rpc
#	if [ $? -eq 0 ]; then
#		__build_package_simple
#	else
#		echo "Failed to configure!"
#		exit 1
#	fi

#	echo "downloading gcc and dependancies.."
#	cd /tmp/halogen
#	wget -q -N https://ftp.gnu.org/pub/gnu/gcc/gcc-6.2.0/gcc-6.2.0.tar.gz
#	_lfs_fetch_gcc_dependancies
#	echo "oonfiguring gcc.."
#	../configure -v --enable-languages=c,c++,go,fortran,objc,obj-c++ --prefix=/usr --enable-shared --enable-linker-build-id --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-objc-gc --with-arch-32=i686 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --disable-multilib --disable-bootstrap
#	if [ $? -eq 0 ]; then
#		__build_package_simple
#	else
#		echo "Failed to configure!"
#		exit 1
#	fi
#	exit ;;
 # build-base)
    # query="SELECT * FROM packages_base WHERE 1"
    # commit=`sqlite3 $lib_path/halogen.db "$query";
    
    # echo $commit
    
    # for row in $commit; do
      # if [ -z "$row" ]; then
        # echo "Halogen is (propably) complete!"
        # exit 0
      # fi
      
      # export pkg_name=`echo $row | awk '{split($0,a,"|"); print a[2]}'`
      # export pkg_status=`echo $row | awk '{split($0,a,"|"); print a[3]}'`
      
      # source $lib_path/pkg/$pkg_name
      
      # echo $pkg_name
      # echo $pkg_status
      
      # if [ "$pkg_status" == installed ]; then
        # echo "Package $pkg_name is already installed, skipping." 
        # continue
      # fi
     
      # rm -Rf "${pkg_name}"
      # rm -Rf "${pkg_name}-build"
      
      # echo "Downloading package $pkg_name ..."
      # wget -nc -q -O $pkg_name $furl
      
      # echo "Extracting package $pkg_name ..."
      # halogenzip ${pkg_name}
      # mkdir "${pkg_name}-build"
      # cd "${pkg_name}-build"
      
      # continue
      
      # echo "Patching ..."
      # # pre hook
      
      # echo "Configuring archives of $pkg_name ..."
      # echo $Conf
      # ../$pkg_name/configure $Conf CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS"
      
      # echo "Building package of $pkg_name ..."
      # echo "CFLAGS=$CFLAGS CXXFLAGS=$CXXFLAGS"
      # make CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS"
      
      # if [ "$_make_check" -eq "1" ]; then
	# return 1
      # fi
      
      # $Id=$Id+1
      # if [ $? -eq 0 ] ; then
        # echo "Installing package $pkg_name ..."
        # sudo make install
        # if [ $? -eq 0 ] ; then
          # sqlite3 $lib_path/remote.db "UPDATE base_packages SET status = 'Installed' WHERE id = $Id";
        # else
          # echo "$pkg_name - make install failed!"
          # exit 1
        # fi
      # else
        # echo "$pkg_name - make check failed!"
        # exit 1
      # fi
      
      # cd /tmp/halogen
    # done
    # exit 0;;
  # optimize-debian)
    # query="SELECT packages FROM packages_base_debian WHERE 1"
    # commit=`sqlite3 $lib_path/halogen.db "$query"`;
    
    # IFS=$'\n'
    # _lines=($commit)
    
    # for row in ${_lines[@]}; do 
      # query="SELECT opt FROM packages_base_debian WHERE packages='$row'"
      # export _opti=`sqlite3 $lib_path/halogen.db "$query"`;
      
      # IFS=$' '
      # _packages=($row)

      # for _package in ${_packages[@]}; do
        # cd $tmp_path
        
        # _query="SELECT EXISTS(SELECT 1 FROM packages_installed WHERE package = '$_package' LIMIT 1);"
        # _installed=`sqlite3 $lib_path/halogen.db "$_query"`;
        
        # echo "package = $_package - installed = $_installed - optimize = $_opti"
        
        # if [ "$_installed" -eq "1" ]; then
          # echo "$_package is already installed."
          # continue
        # fi
        
        # echo "fetching $_package .."
        # apt-src install $_package
        
        # unset $IFS
        # cd ${tmp_path}/${_package}*
        
        # if _make_build $_opti; then
          # echo
        # else
          # continue
        # fi
        # if _make_check; then
          # echo
        # else
          # continue
        # fi
        # if _make_install; then
          # sqlite3 $lib_path/halogen.db "INSERT INTO packages_installed (package) VALUES ('$_package')";
        # else
          # continue
        # fi
        # continue
      # done
    # done
    # exit ;;