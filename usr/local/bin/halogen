#!/bin/bash
# 
# halogen is a simple source based package manager written in bash
# Copyright (C) 2015 Ilari Jääskeläinen
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.ddd
source /etc/halogen.conf

# definations
BUILD_FLAGS='CFLAGS="${CFLAGS}" CXXFLAGS="${CXXFLAGS}" LDFLAGS="${LDFLAGS}"'
# definations; query cache
function __db_cached_results_pkg {
	rv=$(sqlite3 ${1} "${2/DEF_PACKAGE_ID/${pkg_id}}") && echo "${FUNCNAME[0]}('${1}', '${2}') rv='${rv}'"
	if [ $? -ne 0 ]; then echo "query failed!" && _aux_set_package_sanity -1 && exit 1; else return ${rv}; fi
}
# definations; query templates
function __db_cached_results_pkg_pkgs { return $(__db_cached_results_pkg ${REMOTE_DB} "SELECT id FROM packages WHERE 1 ORDER BY id ASC") }
function __db_cached_results_pkg_pkg { return $(__db_cached_results_pkg ${REMOTE_DB} "SELECT pkg FROM packages WHERE id=DEF_PACKAGE_ID") }
function __db_cached_results_pkg_ver { return $(__db_cached_results_pkg ${REMOTE_DB} "SELECT ver FROM packages WHERE id=DEF_PACKAGE_ID") }
function __db_cached_results_pkg_rev { return $(__db_cached_results_pkg ${REMOTE_DB} "SELECT rev FROM packages WHERE id=DEF_PACKAGE_ID") }
function __db_cached_results_pkg_url { return $(__db_cached_results_pkg ${REMOTE_DB} "SELECT url FROM packages WHERE id=DEF_PACKAGE_ID") }
function __db_cached_results_pkg_furl { return $(__db_cached_results_pkg ${REMOTE_DB} "SELECT furl FROM packages WHERE id=DEF_PACKAGE_ID") }
function __db_cached_results_pkg_hash { return $(__db_cached_results_pkg ${REMOTE_DB} "SELECT hash FROM packages WHERE id=DEF_PACKAGE_ID") }
function __db_cached_results_pkg_get_pre_hooks { return $(__db_cached_results_pkg ${REMOTE_DB} "SELECT __build_get_sources_pre_hooks FROM packages WHERE id=DEF_PACKAGE_ID") }
function __db_cached_results_pkg_get_post_hooks { return $(__db_cached_results_pkg ${REMOTE_DB} "SELECT __build_get_sources_pre_hooks FROM packages WHERE id=DEF_PACKAGE_ID") }
# definations; little more special stuff
function __db_cached_results_is_installed {	if [[ $(echo $(__db_cached_results ${LOCAL_DB} "SELECT count(*), * FROM packages WHERE pkg='$(__db_cached_results_pkg_pkg)' AND ver='$(__db_cached_results_pkg_ver)' AND rev='$(__db_cached_results_pkg_rev)'") | awk '{split($0,a,"|"); print a[1]}') != "0" ]]; then return 1; else return 0; fi }
function __db_cached_results_mark_installed { $(__db_cached_results ${LOCAL_DB} "INERT INTO packages (pkg, ver, rev) VALUES ('$(__db_cached_results_pkg_pkg)', '$(__db_cached_results_pkg_ver)', '$(__db_cached_results_pkg_rev)')") && return 1; }

if [ ! -d "${TMP_PATH}" ]; then
	echo "${TMP_PATH} folder not found; please run make install."
	exit -1
fi
cd ${TMP_PATH}

function _aux_root_check {
  	if [ "$EUID" -ne 0 ]; then
	   echo 'always run halogen ${1} as root'
	   exit
	fi
}
function _aux_remote_db_touch {
	# sqlite3 ${REMOTE_DB} "UPDATE pkgs SET cfg = Replace(cfg, x'0D', '')"	# Disk I/O-error
	return 0;
}
function _aux_set_package_sanity {
	if [[ ${1} == -1 ]]; then
		export usermode_build_succeeded=-1
		exit -1
	fi							
	return 0;
}
export -f _aux_set_package_sanity
#
# __build_get_sources package_id
#
function __build_get_sources() {
	echo "${FUNCNAME[0]}(${pkg_id})"
	
	_file_path_checksum="$(__db_cached_results_pkg_pkg)-$(__db_cached_results_pkg_ver)r$(__db_cached_results_pkg_rev).checksum"
	
	cd /tmp/halogen
	
	$_db_cached_results_pkg_pre_hooks
	echo "downloading $(__db_cached_results_pkg_pkg)-$(__db_cached_results_pkg_ver)build$(__db_cached_results_pkg_rev) .."		# DOWNLOADING PACKAGE
	wget -q -N $(__db_cached_results_pkg_furl)																					# --
	
	rm -f $_file_path_checksum											# CHECKSUMMING PACKAGE
	echo "$_db_cached_results_pkg_hash" >> $_file_path_checksum			# --
	sha512sum -c $_file_path_checksum									# --
	i=0
	while [[ $? != 0 && i < 3 ]]; do									# --
		echo "Checksum INVALID !!"										# --
		wget -q $(__db_cached_results_pkg_furl)							# -- 
		i=i+1															# --
	done;																# --
	if [ i >= 3 ]; then
		echo "Checksum failed too many times, aborting."
		exit -1
	fi
	echo "Checksum OK !!"												# --
	$_db_cached_results_pkg_post_hooks
	echo "${FUNCNAME[0]}(${pkg_id}) succeeded."
	return 0;
}
function __build_add_structure() {
	echo "${FUNCNAME[0]}(${pkg_id})"
	
	_db_cached_results_pkg_furl=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT furl FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg__build_add_structure_pre_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_add_structure_pre_hooks FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg__build_add_structure_post_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_add_structure_post_hooks FROM pkgs WHERE id=${pkg_id}"`
	
	$_db_cached_results_pkg__build_add_structure_pre_hooks
	
	_pkg_packagename=$(basename "$(__db_cached_results_pkg_furl)")
	_pkg_foldername="${_pkg_packagename%.*.*}"
	
	cd /tmp/halogen && rm -Rf ${_pkg_foldername} && tar -xf ${_pkg_packagename} && mkdir ${_pkg_foldername}/build && cd ${_pkg_foldername}/build
	
	$_db_cached_results_pkg__build_add_structure_post_hooks
	
	if [ $? -eq 0 ]; then
		return 0
	fi
	echo "${FUNCNAME[0]}(${pkg_id}) failed."
	return -1
}
function __build_configure() {
	echo "${FUNCNAME[0]}(${pkg_id})"
	
	_db_cached_results_pkg_pkg=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT pkg FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_ver=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT ver FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_rev=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT rev FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_cfg=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT cfg FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_furl=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT furl FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_pre_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_configure_pre_hooks FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_post_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_configure_post_hooks FROM pkgs WHERE id=${pkg_id}"`
	_pkg_name="$(__db_cached_results_pkg_pkg) ($(__db_cached_results_pkg_ver)r$(__db_cached_results_pkg_rev))"

	$_db_cached_results_pkg_pre_hooks
	# main-hooks
	echo "Configuring ${_pkg_name}.."
	_db_cached_results_pkg_cfg_respect_cflags=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT cfg_respect_user_optimization FROM pkgs WHERE id=${pkg_id}"`
	if [ $_db_cached_results_pkg_cfg_respect_cflags == 0 ]; then
		../configure $_db_cached_results_pkg_cfg
	else
		${BUILD_FLAGS} ../configure $_db_cached_results_pkg_cfg
	fi
	if [ $? -eq 0 ]; then
		$_db_cached_results_pkg_post_hooks
		return 0
	fi
    echo "${FUNCNAME[0]}(${pkg_id}) failed."
	return -1;
}
function __build_make() {
	echo "${FUNCNAME[0]}(${pkg_id}) failed."
	# pre-hooks
	# main-hooks
	_db_cached_results_pkg_pre_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_make_pre_hooks FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_post_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_make_post_hooks FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_cfg_respect_cflags=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT cfg_respect_user_optimization FROM pkgs WHERE id=${pkg_id}"`
	
	$_db_cached_results_pkg_pre_hooks
	
	if [ $_db_cached_results_pkg_cfg_respect_cflags == 0 ]; then
		make -j1
	else
		${BUILD_FLAGS} make ${MAKEOPTS}
	fi
	if [ $? -eq 0 ]; then
		$_db_cached_results_pkg_post_hooks
		return 0
	fi
    echo "${FUNCNAME[0]}(${pkg_id}) failed."
	# post-hooks
	return -1
}
function __build_check() {
	echo "${FUNCNAME[0]}(${pkg_id})"
	# pre-hooks
	_db_cached_results_pkg_pre_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_check_pre_hooks FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_post_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_check_post_hooks FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_cfg_respect_cflags=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT cfg_respect_user_optimization FROM pkgs WHERE id=${pkg_id}"`
	
	$_db_cached_results_pkg_pre_hooks
	
	if [ $_db_cached_results_pkg_cfg_respect_cflags == 0 ]; then
		make -j1 check
	else
		${BUILD_FLAGS} make ${MAKEOPTS} check
	fi
	if [ $? -eq 0 ]; then
		$_db_cached_results_pkg_post_hooks
		return 0
	fi
    echo "${FUNCNAME[0]}(${pkg_id}) failed."
	return -1
}
function __build_install() {
	echo "${FUNCNAME[0]}(${pkg_id})"
	
	_db_cached_results_pkg_pre_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_install_pre_hooks FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_post_hooks=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT __build_install_post_hooks FROM pkgs WHERE id=${pkg_id}"`

	_aux_root_check
	
	_db_cached_results_pkg_furl=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT furl FROM pkgs WHERE id=${pkg_id}"`
	_pkg_packagename=$(basename "$_db_cached_results_pkg_furl")
	_pkg_foldername="${_pkg_packagename%.*.*}"
	cd /tmp/halogen && cd ${_pkg_foldername}/build
	
	$_db_cached_results_pkg_pre_hooks
	
	make install
	if [ $? -eq 0 ]; then
		$_db_cached_results_pkg_post_hooks
		return 0;
	fi
	
	echo "${FUNCNAME[0]}(${pkg_id}) failed!"
	exit -1;
}
function __build_sanitize_structure() {
	echo "${FUNCNAME[0]}(${pkg_id})"
	
	_db_cached_results_pkg_furl=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT furl FROM pkgs WHERE id=${1}"`
	
	_pkg_packagename=$(basename "$_db_cached_results_pkg_furl")
	_pkg_foldername="${_pkg_packagename%.*.*}"
	
	cd /tmp/halogen && rm -Rf ${_pkg_foldername}
	echo "${FUNCNAME[0]}(${pkg_id}) succeeded."
	return 0;
}
export -f __build_get_sources
export -f __build_add_structure
export -f __build_configure
export -f __build_make
export -f __build_check
#
# build; with databases; configure and build
#
# return value = pkg_id
#	-1 = usermode build failed
#	 0 = usermode build succeeded
#	 1 = usermode build package already installed
function _build_package {
	echo "${FUNCNAME[0]}(${pkg_id})"
	
	_db_cached_results_pkg_pkg=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT pkg FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_ver=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT ver FROM pkgs WHERE id=${pkg_id}"`
	_db_cached_results_pkg_rev=`sqlite3 /var/lib/halogen/sqlite.remote "SELECT rev FROM pkgs WHERE id=${pkg_id}"`
	_pkg_name="$(__db_cached_results_pkg_pkg) ($(__db_cached_results_pkg_ver)r$(__db_cached_results_pkg_rev))"

	export usermode_build_succeeded=0
	
	cd ${TMP_PATH}
	
	__build_get_sources ${pkg_id}
	if [ $? -ne 0 ]; then _aux_set_package_sanity -1; fi
	__build_add_structure ${pkg_id}
	if [ $? -ne 0 ]; then _aux_set_package_sanity -1; fi
	__build_configure ${pkg_id}
	if [ $? -ne 0 ]; then _aux_set_package_sanity -1; fi
	__build_make ${pkg_id}
	if [ $? -ne 0 ]; then _aux_set_package_sanity -1; fi
	__build_check ${pkg_id}
	if [ $? -ne 0 ]; then _aux_set_package_sanity -1; fi

	echo "${FUNCNAME[0]}(${pkg_id}) succeeded."
	
	export usermode_build_succeeded=1
	
	exit 0;
}

export -f _build_package
function _build_package_root {
	echo "${FUNCNAME[0]}(package_id)"
	__build_install ${pkg_id}
	__build_sanitize_structure ${pkg_id}
	echo "${FUNCNAME[0]}(package_id) succeeded."
	return 0;
}
#
# simple build; without databases; in already configured build folder
#
function __build_package_simple {
	echo "${FUNCNAME[0]}(null)"
	
	__build_make -1
	__build_check -1
	__build_install -1
	
	cd /tmp/halogen
	
	return 0;
}
function _lfs_fetch_gcc_dependancies {
#	ls -v ../build &> /dev/null
#	if [ $? -eq 0 ]; then
#		echo "Fetching GCC dependancies..";
#		wget -q -N http://www.mpfr.org/mpfr-current/mpfr-3.1.5.tar.gz
#		wget -q -N https://ftp.gnu.org/gnu/gmp/gmp-6.1.1.tar.bz2
#		wget -q -N ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.2.tar.gz
#		rm -Rf {../mpfr,../gmp,../mpc}
#		tar -xf mpfr-3.1.5.tar.gz && tar -xf gmp-6.1.1.tar.bz2 && tar -xf mpc-1.0.2.tar.gz
#		mv -f mpfr-3.1.5 ../mpfr && mv -f gmp-6.1.1 ../gmp && mv -f mpc-1.0.2 ../mpc
#		return 0;
#	fi
#   echo "_lfs_fetch_gcc_dependancies(null): script is in wrong folder.."
#   exit 1;
	return -1;
}
function _lfs_check_bootstrap_environment {
	echo "${FUNCNAME[0]}(null)"
	# toolchain check
	export LC_ALL=C
	bash --version | head -n1 | cut -d" " -f2-4
	MYSH=$(readlink -f /bin/sh)
	echo "/bin/sh -> $MYSH"
	echo $MYSH | grep -q bash || echo "ERROR: /bin/sh does not point to bash"
	unset MYSH

	echo -n "Binutils: "; ld --version | head -n1 | cut -d" " -f3-
	bison --version | head -n1

	if [ -h /usr/bin/yacc ]; then
	  echo "/usr/bin/yacc -> `readlink -f /usr/bin/yacc`";
	elif [ -x /usr/bin/yacc ]; then
	  echo yacc is `/usr/bin/yacc --version | head -n1`
	else
	  echo "yacc not found" 
	fi

	bzip2 --version 2>&1 < /dev/null | head -n1 | cut -d" " -f1,6-
	echo -n "Coreutils: "; chown --version | head -n1 | cut -d")" -f2
	diff --version | head -n1
	find --version | head -n1
	gawk --version | head -n1

	if [ -h /usr/bin/awk ]; then
	  echo "/usr/bin/awk -> `readlink -f /usr/bin/awk`";
	elif [ -x /usr/bin/awk ]; then
	  echo awk is `/usr/bin/awk --version | head -n1`
	else 
	  echo "awk not found" 
	fi

	gcc --version | head -n1
	g++ --version | head -n1
	ldd --version | head -n1 | cut -d" " -f2-  # glibc version
	grep --version | head -n1
	gzip --version | head -n1
	cat /proc/version
	m4 --version | head -n1
	make --version | head -n1
	patch --version | head -n1
	echo Perl `perl -V:version`
	sed --version | head -n1
	tar --version | head -n1
	makeinfo --version | head -n1
	xz --version | head -n1

	echo 'int main(){}' > dummy.c && g++ -o dummy dummy.c
	if [ -x dummy ]
	  then echo "g++ compilation OK";
	  else echo "g++ compilation failed"; fi
	rm -f dummy.c dummy
	
	# lib check
	for lib in lib{gmp,mpfr,mpc}.la; do
	echo $lib: $(if find /usr/lib* -name $lib|
		grep -q $lib;then :;else echo not;fi) found
	done
	unset lib
	
	while true; do
    read -p "** warning: are you sure your bootstrap environment is ready? **" yn
    case $yn in
        [Yy]* ) break;;
        [Nn]* ) exit;;
        * ) echo "please answer yes or no.";;
    esac
	done
}
function _lfs_prepare_disks {
	mkdir -pv $LFS							# create new root
	mount -v -t ext4 $BOOTSTRAP_ROOT $LFS	# mount new root
	/sbin/swapon -v $BOOTSTRAP_SWAP			# mount new swapon
	mkdir -v $LFS/sources					# create temp folders 
	chmod -v a+wt $LFS/sources				# change temp folder permissions
	mkdir -v $LFS/tools						# create temp folders
	ln -sv $LFS/tools /						# create temp folders symlink
	groupadd lfs							# create user
	useradd -s /bin/bash -g lfs -m -k /dev/null lfs	# modify user shell
	passwd lfs								# change user password
	chown -vR lfs /home/lfs &> /dev/null	# just in case
	chown -v lfs $LFS/tools					# change temp folder permissions
	chown -v lfs $LFS/sources				# change temp folder permissions
	echo "To continue, please run:"
	echo "su -l lfs"									#
	echo "su -c '/usr/local/bin/halogen update' root"	# guide
	echo "halogen bootstrap-internal-one"				#
}
function _lfs_prepare_user {

	echo "${FUNCNAME[0]}(null)"
	
	while true; do
		read -p "Install default .bashrc and .bash_profile for use lfs?" yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) return 0;;
			* ) echo "yes or no.";;
		esac
	done
	rm /home/lfs/.bashrc
	rm /home/lfs/.bash_profile
	cp -f /tmp/halogen/.bashrc /home/lfs/.bashrc
	cp -f /tmp/halogen/.bash_profile /home/lfs/.bash_profile
	ln -s /usr/lib/x86_64-linux-gnu /usr/lib64
	return 1;
}
function _bootstrap_lfs_user {

	echo "${FUNCNAME[0]}(null)"
	
	_aux_remote_db_touch;

	# basic manipulative query
	pkgs=$(__db_cached_results_pkg ${REMOTE_DB} "${__db_cached_query_pkg_pkgs}")
	
	for package_id in ${pkgs}; do
		export pkg_id=${package_id}
		
		if [ -z "$pkg_id" ]; then
			echo "Halogen package manager is complete!"
			exit 0
		fi
		
		_db_cached_results_pkg_pkg=$(__db_cached_results_pkg ${REMOTE_DB} "${__db_cached_query_pkg_pkg}")
		_db_cached_results_pkg_ver=$(__db_cached_results_pkg ${REMOTE_DB} "${__db_cached_query_pkg_ver}")
		_db_cached_results_pkg_rev=$(__db_cached_results_pkg ${REMOTE_DB} "${__db_cached_query_pkg_rev}")
		_db_cached_results_pkg_cfg=$(__db_cached_results_pkg ${REMOTE_DB} "${__db_cached_query_pkg_cfg}")
		_db_cached_results_is_installed=$(__db_cached_results_pkg ${LOCAL_DB} "${__db_cached_query_pkg_is_installed}")

		_pkg_name="$(__db_cached_results_pkg_pkg) ($_db_cached_results_pkg_ver-r$(__db_cached_results_pkg_rev))"
		echo "${FUNCNAME[0]}(${1}) working on ${_pkg_name} id=${pkg_id}.."
		
		if [[ $(__db_cached_results_is_installed ${pkg_id}) == 1 ]]; then echo "package is already installed, rolling on.." && continue; fi
		
		su lfs -c '_build_package'		# download, hash, fold, configure, build and check as normal user
		if [ ${usermode_build_succeeded} -ne 1 ]; then echo "For some reason _build_package was succesful but usermode_build_succeeded=${usermode_build_succeeded}" && exit -1; fi
		_build_package_root				# install and sanitize as root because I'm lazy..
		echo "_build_package_root rv = $?"
		if [ $? -ne 0 ]; then echo "NOT EQUAL 0!! HALT!!" && exit -1; fi
		$(__db_cached_results_mark_installed ${pkg_id})
	done
	return 0;
}
case ${1} in
  update)
	_aux_root_check ${1}
	echo "halogen update does not work .."
#	echo "Updating scripts .."
#	wget -q -O /usr/local/bin/halogen https://raw.githubusercontent.com/nafac/halogen/master/usr/local/bin/halogen
	echo "Enforcing directory structure and permissions.."
	chmod +x /usr/local/bin/halogen
	mkdir /var/lib/halogen &> /dev/null
	mkdir /tmp/halogen &> /dev/null
	chmod -R 1777 /var/lib/halogen &> /dev/null
	chmod -R 1777 /tmp/halogen &> /dev/null
#	echo "Updating package databases .."
#	wget -q -O  /var/lib/halogen/sqlite.remote https://github.com/nafac/halogen/raw/master/var/lib/halogen/sqlite.remote
    exit 0;;
  bootstrap-lfs) 
	_aux_root_check ${1}
	_lfs_check_bootstrap_environment;
	_lfs_prepare_disks;
	_lfs_prepare_user;
	exit ;;
  bootstrap-lfs-user) 
	_aux_root_check ${1}
	_bootstrap_lfs_user;
	exit ;;
  resume)
	exit ;;
  *)
    exit ;;
esac
